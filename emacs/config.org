#+TITLE: Emacs configuration file
#+AUTHOR: Michael Scholz
#+PROPERTY: header-args :tangle yes
#+STARTUP: overview

* Early startup configuration
** Set up the package manager
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))
#+end_src
** Install a wrapper around the raw package manager
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
#+end_src
** Make sure my PATH is set correctly (on Macs)
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :defer nil
    :config (exec-path-from-shell-initialize))
#+end_src
* UI configuration
** Set the font for high-DPI displays
#+begin_src emacs-lisp
  (set-frame-font "Iosevka Emacs Plain-12:weight=semibold:width=expanded")
#+end_src
** Enable switching fonts for high-DPI and low-DPI displays
#+begin_src emacs-lisp
  (defun remove-bold-faces ()
    (interactive)
    (mapc
     (lambda (face)
       (set-face-attribute face nil :weight 'medium))
     (face-list)))

  (defun remove-italic-faces ()
    (interactive)
    (mapc
     (lambda (face)
       (set-face-attribute face nil :slant 'normal))
     (face-list)))

  (defun switch-to-retina ()
    (interactive)
    (set-frame-font "Iosevka Emacs Plain-12:weight=semibold:width=expanded")
    (load-theme 'dorkula))

  (defun switch-to-bitmap ()
    (interactive)
    (set-frame-font "tewi tall-11:antialias=0")
    (remove-bold-faces)
    (remove-italic-faces))
#+end_src
** Load a nice colour scheme
#+begin_src emacs-lisp
  (setq dorkula-enlarge-headings nil)
  (load-theme 'dorkula)
#+end_src
** Hide extra tool bars
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src
** Install a nicer mode-line than the default
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :config (setq doom-modeline-height 10
		  doom-modeline-icon nil
		  doom-modeline-env-version nil
		  doom-modeline-buffer-encoding nil))
#+end_src
** Keep the scratch buffer between shutdowns
#+begin_src emacs-lisp
  (use-package persistent-scratch
    :ensure t
    :defer nil
    :init (persistent-scratch-setup-default))
#+end_src
* General programming settings
** Fix how Emacs makes backup files
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/saves"))
	backup-by-copying t
	delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)
#+end_src
** Move =custom= stuff into a separate file
#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+end_src
** Swap Command and Option on Macs
#+begin_src emacs-lisp
  (setq mac-option-modifier 'super
	mac-command-modifier 'meta)
#+end_src
** Shorten yes and no
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** Support for Conda, Mamba, and Micromamba package managers
#+begin_src emacs-lisp
  (use-package conda
    :ensure t
    :defer t
    :init (setq conda-anaconda-home "/Users/mscholz/.micromamba/")
    :disabled t)
  
  (use-package micromamba
    :ensure t
    :defer t)
#+end_src

** Docker
*** The Docker wrapper itself
#+begin_src emacs-lisp
  (use-package docker
    :ensure t
    :defer t
    :bind ("C-c d" . docker))
#+end_src
*** A major mode for Dockerfiles
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :defer t)
#+end_src
* Language-specific stuff
** Org-mode
#+begin_src emacs-lisp
  (setq org-directory "~/Developer/Org/"
	org-structure-template-alist '(("a" . "export ascii")
				       ("c" . "center")
				       ("C" . "comment")
				       ("e" . "src emacs-lisp")
				       ("E" . "export")
				       ("h" . "export html")
				       ("l" . "export latex")
				       ("q" . "quote")
				       ("s" . "src")
				       ("v" . "verse"))
	org-agenda-files (directory-files-recursively org-directory "\\.org$"))
  (require 'org-tempo)
#+end_src




** YAML files
#+begin_src emacs-lisp
  (use-package yaml-mode
    :defer t
    :ensure t)
#+end_src
** Everything else

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :defer t)
#+end_src

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :defer t
    :init (vertico-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :defer t
    :bind (("C-x b" . consult-buffer))
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :config (recentf-mode 1))
#+end_src

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer t)
#+end_src


#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :defer t)
#+end_src

#+begin_src emacs-lisp
  (use-package hl-todo
    :ensure t
    :defer t
    :config (global-hl-todo-mode +1))
#+end_src

#+begin_src emacs-lisp
  (use-package savehist
    :ensure t
    :defer nil
    :init
    (savehist-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :defer t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :defer t
    :init (marginalia-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :defer t)
#+end_src

#+begin_src emacs-lisp
  (use-package format-all
    :ensure t
    :defer t
    :hook ((python-mode . format-all-mode)
	   (format-all-mode-hook . format-all-ensure-formatter))
    :config (custom-set-variables
	     '(format-all-formatters (quote (("Python" black))))))
#+end_src

#+begin_src emacs-lisp
  (use-package treesit-auto
    :ensure t
    :demand t
    :config
    (setq treesit-auto-install 'prompt)
    (global-treesit-auto-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :defer nil
    :config (progn
	      (projectile-mode 1)
	      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)))
#+end_src



#+begin_src emacs-lisp
  (use-package eshell-prompt-extras
    :ensure t
    :config (eval-after-load 'esh-opt
	      (progn
		(autoload 'epe-theme-lambda "eshell-prompt-extras")
		(setq eshell-highlight-prompt nil
		      eshell-prompt-function 'epe-theme-lambda))))
#+end_src

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown")
    :bind (:map markdown-mode-map
		("C-c C-e" . markdown-do)))
#+end_src

#+begin_src emacs-lisp
  ;; Highlight as much as possible with tree-sitter
  (setq treesit-font-lock-level 4)
#+end_src
